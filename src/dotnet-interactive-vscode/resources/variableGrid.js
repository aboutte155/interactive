(function () {
    'use strict';

    // Copyright (c) .NET Foundation and contributors. All rights reserved.
    // Licensed under the MIT license. See LICENSE file in the project root for full license information.
    window.addEventListener('DOMContentLoaded', () => {
        const filterElement = document.getElementById('filter');
        const contentElement = document.getElementById('content');
        let tableRows = [];
        window.addEventListener('message', event => {
            switch (event.data.command) {
                case 'set-rows':
                    tableRows = setDataRows(contentElement, event.data.rows);
                    doFilter();
                    break;
            }
        });
        function doFilter() {
            for (const row of tableRows) {
                row.element.style.display = 'none';
                if (contains(row.row.name, filterElement.value) ||
                    contains(row.row.value, filterElement.value) ||
                    contains(row.row.kernel, filterElement.value)) {
                    row.element.style.display = '';
                }
            }
        }
        function clearFilter() {
            filterElement.value = '';
            doFilter();
        }
        filterElement.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                clearFilter();
            }
        });
        filterElement.addEventListener('input', doFilter);
        document.getElementById('clear').addEventListener('click', clearFilter);
    });
    function contains(text, search) {
        return text.toLowerCase().indexOf(search.toLocaleLowerCase()) > -1;
    }
    function setDataRows(container, rows) {
        const displayedRows = [];
        const table = document.createElement('table');
        const header = document.createElement('tr');
        table.appendChild(header);
        // create headers
        const nameHeader = document.createElement('th');
        nameHeader.classList.add('name-column');
        nameHeader.innerText = 'Name';
        header.appendChild(nameHeader);
        const valueHeader = document.createElement('th');
        valueHeader.classList.add('value-column');
        valueHeader.innerText = 'Value';
        header.appendChild(valueHeader);
        const kernelHeader = document.createElement('th');
        kernelHeader.classList.add('kernel-column');
        kernelHeader.innerText = 'Kernel';
        header.appendChild(kernelHeader);
        const shareHeader = document.createElement('th');
        shareHeader.classList.add('share-column');
        shareHeader.innerText = 'Share';
        header.appendChild(shareHeader);
        for (const row of rows) {
            const dataRow = document.createElement('tr');
            table.appendChild(dataRow);
            const dataName = document.createElement('td');
            dataName.innerText = truncateValue(row.name);
            dataRow.appendChild(dataName);
            const dataValue = document.createElement('td');
            dataValue.innerText = truncateValue(row.value);
            dataRow.appendChild(dataValue);
            const dataKernel = document.createElement('td');
            dataKernel.innerText = truncateValue(row.kernel);
            dataRow.appendChild(dataKernel);
            const dataShare = document.createElement('td');
            dataShare.classList.add('share-data');
            dataShare.innerHTML = `<a href="${row.link}"><svg class="share-symbol" aria-label"Share ${row.name} from ${row.kernel} kernel to"><use xlink:href="#share-icon"></use></svg></a>`;
            dataRow.appendChild(dataShare);
            displayedRows.push({
                row,
                element: dataRow,
            });
        }
        container.innerHTML = '';
        container.appendChild(table);
        return displayedRows;
    }
    const maxDisplayLength = 100;
    function truncateValue(value) {
        if (value.length > maxDisplayLength) {
            return value.substring(0, maxDisplayLength - 3) + '...';
        }
        return value;
    }
    // @ts-ignore
    acquireVsCodeApi();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVHcmlkLmpzIiwic291cmNlcyI6WyIuLi9zcmMvd2Vidmlldy92YXJpYWJsZUdyaWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuXHJcbmltcG9ydCB7IFZhcmlhYmxlR3JpZFJvdyB9IGZyb20gJy4vdmFyaWFibGVHcmlkSW50ZXJmYWNlcyc7XHJcblxyXG5pbnRlcmZhY2UgRGlzcGxheWVkVmFyaWFibGVHcmlkUm93IHtcclxuICAgIHJvdzogVmFyaWFibGVHcmlkUm93O1xyXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZmlsdGVyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXInKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29uc3QgY29udGVudEVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIGxldCB0YWJsZVJvd3M6IERpc3BsYXllZFZhcmlhYmxlR3JpZFJvd1tdID0gW107XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2ZW50ID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuY29tbWFuZCkge1xyXG4gICAgICAgICAgICBjYXNlICdzZXQtcm93cyc6XHJcbiAgICAgICAgICAgICAgICB0YWJsZVJvd3MgPSBzZXREYXRhUm93cyhjb250ZW50RWxlbWVudCwgZXZlbnQuZGF0YS5yb3dzKTtcclxuICAgICAgICAgICAgICAgIGRvRmlsdGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBkb0ZpbHRlcigpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0YWJsZVJvd3MpIHtcclxuICAgICAgICAgICAgcm93LmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5zKHJvdy5yb3cubmFtZSwgZmlsdGVyRWxlbWVudC52YWx1ZSkgfHxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5zKHJvdy5yb3cudmFsdWUsIGZpbHRlckVsZW1lbnQudmFsdWUpIHx8XHJcbiAgICAgICAgICAgICAgICBjb250YWlucyhyb3cucm93Lmtlcm5lbCwgZmlsdGVyRWxlbWVudC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJvdy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhckZpbHRlcigpIHtcclxuICAgICAgICBmaWx0ZXJFbGVtZW50LnZhbHVlID0gJyc7XHJcbiAgICAgICAgZG9GaWx0ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAgICAgY2xlYXJGaWx0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGZpbHRlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBkb0ZpbHRlcik7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXInKSEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGVhckZpbHRlcik7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gY29udGFpbnModGV4dDogc3RyaW5nLCBzZWFyY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaC50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+IC0xO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXREYXRhUm93cyhjb250YWluZXI6IEhUTUxFbGVtZW50LCByb3dzOiBWYXJpYWJsZUdyaWRSb3dbXSk6IERpc3BsYXllZFZhcmlhYmxlR3JpZFJvd1tdIHtcclxuICAgIGNvbnN0IGRpc3BsYXllZFJvd3M6IERpc3BsYXllZFZhcmlhYmxlR3JpZFJvd1tdID0gW107XHJcblxyXG4gICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xyXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuICAgIHRhYmxlLmFwcGVuZENoaWxkKGhlYWRlcik7XHJcblxyXG4gICAgLy8gY3JlYXRlIGhlYWRlcnNcclxuICAgIGNvbnN0IG5hbWVIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAgbmFtZUhlYWRlci5jbGFzc0xpc3QuYWRkKCduYW1lLWNvbHVtbicpO1xyXG4gICAgbmFtZUhlYWRlci5pbm5lclRleHQgPSAnTmFtZSc7XHJcbiAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobmFtZUhlYWRlcik7XHJcblxyXG4gICAgY29uc3QgdmFsdWVIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAgdmFsdWVIZWFkZXIuY2xhc3NMaXN0LmFkZCgndmFsdWUtY29sdW1uJyk7XHJcbiAgICB2YWx1ZUhlYWRlci5pbm5lclRleHQgPSAnVmFsdWUnO1xyXG4gICAgaGVhZGVyLmFwcGVuZENoaWxkKHZhbHVlSGVhZGVyKTtcclxuXHJcbiAgICBjb25zdCBrZXJuZWxIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAga2VybmVsSGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2tlcm5lbC1jb2x1bW4nKTtcclxuICAgIGtlcm5lbEhlYWRlci5pbm5lclRleHQgPSAnS2VybmVsJztcclxuICAgIGhlYWRlci5hcHBlbmRDaGlsZChrZXJuZWxIZWFkZXIpO1xyXG5cclxuICAgIGNvbnN0IHNoYXJlSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcclxuICAgIHNoYXJlSGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3NoYXJlLWNvbHVtbicpO1xyXG4gICAgc2hhcmVIZWFkZXIuaW5uZXJUZXh0ID0gJ1NoYXJlJztcclxuICAgIGhlYWRlci5hcHBlbmRDaGlsZChzaGFyZUhlYWRlcik7XHJcblxyXG4gICAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xyXG4gICAgICAgIGNvbnN0IGRhdGFSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKGRhdGFSb3cpO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgZGF0YU5hbWUuaW5uZXJUZXh0ID0gdHJ1bmNhdGVWYWx1ZShyb3cubmFtZSk7XHJcbiAgICAgICAgZGF0YVJvdy5hcHBlbmRDaGlsZChkYXRhTmFtZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgZGF0YVZhbHVlLmlubmVyVGV4dCA9IHRydW5jYXRlVmFsdWUocm93LnZhbHVlKTtcclxuICAgICAgICBkYXRhUm93LmFwcGVuZENoaWxkKGRhdGFWYWx1ZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFLZXJuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgIGRhdGFLZXJuZWwuaW5uZXJUZXh0ID0gdHJ1bmNhdGVWYWx1ZShyb3cua2VybmVsKTtcclxuICAgICAgICBkYXRhUm93LmFwcGVuZENoaWxkKGRhdGFLZXJuZWwpO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhU2hhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgIGRhdGFTaGFyZS5jbGFzc0xpc3QuYWRkKCdzaGFyZS1kYXRhJyk7XHJcbiAgICAgICAgZGF0YVNoYXJlLmlubmVySFRNTCA9IGA8YSBocmVmPVwiJHtyb3cubGlua31cIj48c3ZnIGNsYXNzPVwic2hhcmUtc3ltYm9sXCIgYXJpYS1sYWJlbFwiU2hhcmUgJHtyb3cubmFtZX0gZnJvbSAke3Jvdy5rZXJuZWx9IGtlcm5lbCB0b1wiPjx1c2UgeGxpbms6aHJlZj1cIiNzaGFyZS1pY29uXCI+PC91c2U+PC9zdmc+PC9hPmA7XHJcbiAgICAgICAgZGF0YVJvdy5hcHBlbmRDaGlsZChkYXRhU2hhcmUpO1xyXG5cclxuICAgICAgICBkaXNwbGF5ZWRSb3dzLnB1c2goe1xyXG4gICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRhdGFSb3csXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlKTtcclxuXHJcbiAgICByZXR1cm4gZGlzcGxheWVkUm93cztcclxufVxyXG5cclxuY29uc3QgbWF4RGlzcGxheUxlbmd0aCA9IDEwMDtcclxuXHJcbmZ1bmN0aW9uIHRydW5jYXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAodmFsdWUubGVuZ3RoID4gbWF4RGlzcGxheUxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbWF4RGlzcGxheUxlbmd0aCAtIDMpICsgJy4uLic7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IHZzY29kZSA9IGFjcXVpcmVWc0NvZGVBcGkoKTtcclxuXHJcbmZ1bmN0aW9uIGRvVGhlVGhpbmcoa2VybmVsTmFtZTogc3RyaW5nLCB2YWx1ZU5hbWU6IHN0cmluZykge1xyXG4gICAgdnNjb2RlLnBvc3RNZXNzYWdlKHsga2VybmVsTmFtZSwgdmFsdWVOYW1lIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQTtJQUNBO0lBU0EsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQUs7UUFDN0MsTUFBTSxhQUFhLEdBQXFCLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFxQixDQUFDO1FBQzlGLE1BQU0sY0FBYyxHQUFtQixRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBbUIsQ0FBQztRQUM1RixJQUFJLFNBQVMsR0FBK0IsRUFBRSxDQUFDO0lBQy9DLElBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxLQUFLLElBQUc7SUFDdkMsUUFBQSxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTztJQUN0QixZQUFBLEtBQUssVUFBVTtvQkFDWCxTQUFTLEdBQUcsV0FBVyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELGdCQUFBLFFBQVEsRUFBRSxDQUFDO29CQUNYLE1BQU07SUFDYixTQUFBO0lBQ0wsS0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFNBQVMsUUFBUSxHQUFBO0lBQ2IsUUFBQSxLQUFLLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtnQkFDekIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDbkMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFD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
